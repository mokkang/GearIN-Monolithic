# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Node.js Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - run: npm test
# test of policy scan issue importer
 
      - name: Policy scan Issue importer (assumes build)

# on: [push, pull_request, workflow_dispatch]
#  #on: gollum          # sort of a dummy to prevent this from running
  get-policy-flaws:
    runs-on: maven-latest 
    container: 
      image: veracode/api-signing:latest
    steps:
      # Note: this will likely fail if there are more than 500 flaws, due to Veracode results limiting
      #   (would need a more elaborate method)
      - name: get policy flaws
        run: |
          export VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
          curl -fsS https://tools.veracode.com/veracode-cli/install | sh
          ./veracode configure
          ./veracode scan --source https://github.com/mokkang/NodeGoat --type repo --format json --output ./nodegoat_container.json
          ./veracode sbom --source https://github.com/mokkang/NodeGoat --type repo --format json --output ./nodegoat_sbom.json
        # ./veracode scan --source https://github.com/veracode/verademo-dotnet --type repo --format json --output ./veracode_container_scan_dotnet.json
        # ./veracode sbom --source https://github.com/veracode/verademo-dotnet --type repo --format json --output ./sbom_dotnet.json
        #guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=NodeGoat" | jq -r '._embedded.applications[0].guid') 
        #echo GUID: ${guid}
        #  total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True" | jq -r '.page.total_elements')
        #  echo TOTAL_FLAWS: ${total_flaws}
        #  http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True&size=${total_flaws}" > policy_flaws.json
        #  ls -l

      - name: save results file
        uses: actions/upload-artifact@v2
        with:
          name: policy-flaws
          path: .

  import-policy-flaws:
    needs: get-policy-flaws
    runs-on: ubuntu-latest
    steps:
      - name: get flaw file
        uses: actions/download-artifact@v2
        with:
          name: policy-flaws
          path: .

      - name: debug1
        run: |
          pwd
          ls -l
          ls -l .

      - name: import flaws as issues
        uses: buzzcode/veracode-flaws-to-issues@v1
        with:
          scan-results-json: '/tmp/policy_flaws.json'
          github-token: ${{ secrets.GITHUB_TOKEN }}
